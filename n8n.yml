version: '3.8'

# Âncora YAML para definir a configuração comum uma única vez
x-n8n-common: &n8n-common
  image: n8nio/n8n:1.45.1 # Versão estável mais recente
  env_file:
    - n8n.env
  volumes:
    - n8n_data:/home/node/.n8n
    # Monta nosso script adaptador para dentro do container
    - ./entrypoint-n8n.sh:/home/node/.n8n/entrypoint-n8n.sh:ro
  # Define nosso script como o ponto de entrada principal
  entrypoint: /home/node/.n8n/entrypoint-n8n.sh
  networks:
    - backend-network
  secrets:
    - n8n_encryption_key
    - redis_password
  healthcheck:
    test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 60s
  deploy: &n8n-common-deploy
    mode: replicated
    placement:
      constraints:
        - node.role == manager
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s
    resources:
      limits:
        cpus: '2.0'  # Ajustado para servidor 4CPU
        memory: 2G   # Ajustado para servidor 8GB
      reservations:
        cpus: '0.5'
        memory: 512M

services:
  n8n-editor:
    <<: *n8n-common # Herda toda a configuração comum
    command: start
    networks: [ backend-network, traefik-public ]
    deploy:
      <<: *n8n-common-deploy # Herda o deploy comum
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.n8n-editor.rule=Host(`n8n.${DOMAIN_NAME}`)"
        - "traefik.http.routers.n8n-editor.entrypoints=websecure"
        - "traefik.http.routers.n8n-editor.tls.certresolver=letsencrypt"
        - "traefik.http.services.n8n-editor-service.loadbalancer.server.port=5678"
        - "traefik.http.routers.n8n-editor.service=n8n-editor-service"
        - "traefik.http.routers.n8n-editor.middlewares=secure-ratelimit@docker"
        - "traefik.http.middlewares.secure-ratelimit.ratelimit.average=30"
        - "traefik.http.middlewares.secure-ratelimit.ratelimit.burst=50"
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - redis_password
      - n8n_encryption_key

  n8n-webhook:
    <<: *n8n-common
    command: webhook
    networks: [ backend-network, traefik-public ]
    deploy:
      <<: *n8n-common-deploy
      replicas: 2  # Múltiplas instâncias para alta disponibilidade
      resources:
        limits:
          cpus: '1.0'  
          memory: 1G   
        reservations:
          cpus: '0.25'
          memory: 256M
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.n8n-webhook.rule=Host(`webhook-n8n.${DOMAIN_NAME}`)"
        - "traefik.http.routers.n8n-webhook.entrypoints=websecure"
        - "traefik.http.routers.n8n-webhook.tls.certresolver=letsencrypt"
        - "traefik.http.routers.n8n-webhook.service=n8n-webhook-service"
        - "traefik.http.services.n8n-webhook-service.loadbalancer.server.port=5678"
        - "traefik.http.routers.n8n-webhook.priority=1"
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - redis_password
      - n8n_encryption_key

  n8n-mcp-api:
    <<: *n8n-common
    command: webhook
    networks: [ backend-network, traefik-public ]
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/webhook/mcp/health || wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    deploy:
      <<: *n8n-common-deploy
      replicas: 1  # Container específico para MCP
      resources:
        limits:
          cpus: '1.0'  
          memory: 1G   
        reservations:
          cpus: '0.25'
          memory: 256M
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.n8n-mcp-api.rule=(Host(`webhook-n8n.${DOMAIN_NAME}`) && PathPrefix(`/mcp`))"
        - "traefik.http.routers.n8n-mcp-api.entrypoints=websecure"
        - "traefik.http.routers.n8n-mcp-api.tls.certresolver=letsencrypt"
        - "traefik.http.routers.n8n-mcp-api.service=n8n-mcp-api-service"
        - "traefik.http.services.n8n-mcp-api-service.loadbalancer.server.port=5678"
        - "traefik.http.routers.n8n-mcp-api.priority=10"
        - "traefik.http.routers.n8n-mcp-api.middlewares=nogzip@docker"
        - "traefik.http.middlewares.nogzip.headers.customresponseheaders.Content-Encoding="

  n8n-worker:
    <<: *n8n-common
    command: worker --concurrency=10
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'n8n worker' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      <<: *n8n-common-deploy
      replicas: 2  # Múltiplos workers para processar filas
      resources:
        limits:
          cpus: '1.5'  
          memory: 1.5G   
        reservations:
          cpus: '0.5'
          memory: 512M
    secrets:
      - postgres_db
      - postgres_user
      - postgres_password
      - redis_password
      - n8n_encryption_key

volumes:
  n8n_data:

networks:
  traefik-public: { external: true }
  backend-network: { external: true }

secrets:
  postgres_db:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true
  redis_password:
    external: true
  n8n_encryption_key:
    external: true
